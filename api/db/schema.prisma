datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
  firstName           String?
  lastName            String?
  avatar              String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  role                Role             @default(USER)
  status              UserStatus[]
  santa               Pairings[]       @relation(name: "Pairings_Santa")
  person              Pairings[]       @relation(name: "Pairings_Person")
  wishlist            Wishlist[]
  ThankYouTo          ThankYou[]       @relation(name: "ThankYou_ToUser")
  ThankYouFrom        ThankYou[]       @relation(name: "ThankYou_FromUser")
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

enum Role {
  ADMIN
  USER
}

enum Status {
  INVITED
  DECLINED
  ACCEPTED
}

model UserStatus {
  id      String @id()
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  status  Status @default(INVITED)
}

model Wishlist {
  id              Int      @id @default(autoincrement())
  name            String
  url             String
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Int?
  eventId         String
  event           Event    @relation(fields: [eventId], references: [id])
  siteImage       String?
  siteTitle       String?
  siteDescription String?
}

model Event {
  id           String       @id @default(uuid())
  name         String
  date         DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sendReminder Boolean      @default(false)
  userStatus   UserStatus[]
  wishlist     Wishlist[]
  pairings     Pairings[]
  thankYou     ThankYou[]
}

model Pairings {
  id        Int      @id @default(autoincrement())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  santaId   Int
  santa     User     @relation(fields: [santaId], references: [id], name: "Pairings_Santa")
  personId  Int
  person    User     @relation(fields: [personId], references: [id], name: "Pairings_Person")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThankYou {
  id        Int      @id @default(autoincrement())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id], name: "ThankYou_FromUser")
  toUserId  Int
  toUser    User     @relation(fields: [toUserId], references: [id], name: "ThankYou_ToUser")
  message   String
  createdAt DateTime @default(now())
}
